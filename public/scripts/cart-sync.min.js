!function(){const o="https://arco-henna.vercel.app";let t=null,e=!1;function n(){const o="undefined"!=typeof window&&window.CUSTOMER_ID?String(window.CUSTOMER_ID):null;return console.log("👤 Customer ID:",o),o}function c(){const o=!!function(){const o=document.cookie.match(/(?:^|;\s*)persistent_cart_session=([^;]*)/),t=o?decodeURIComponent(o[1]):null;return console.log("🔑 Session Token:",t?"Present":"Not found"),t}();return console.log("👤 User logged in:",o),o}async function a(){try{console.log("🛒 Fetching local cart...");const o=await fetch("/cart.js",{method:"GET",credentials:"include",headers:{Accept:"application/json"}});if(o.ok){const t=await o.json();return console.log("🛒 Local cart fetched:",t),t}}catch(o){console.error("❌ Error fetching Shopify AJAX cart:",o)}return null}function i(o,t=null){o&&(localStorage.setItem("cart",JSON.stringify(o)),console.log("💾 Local cart saved to localStorage"),t&&t())}async function s(e){if(!t)return console.log("⚠️ No customer ID, skipping backend sync"),null;try{console.log("🔄 Syncing local cart to backend...");const n=await fetch(o+"/api/cart",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:t,cartData:e||{}})});if(n.ok){const o=await n.json();return console.log("✅ Local cart synced to backend:",o.cart),o.cart||null}}catch(o){console.error("❌ Error syncing local cart to backend:",o)}return null}function r(o,t){const e=JSON.stringify(o)===JSON.stringify(t);return console.log("🔄 Carts equal:",e),e}console.log("🔄 Cart Sync Script Initialized"),t=n(),function(o){o?(document.cookie=`user_id=${o}; path=/; SameSite=Lax`,console.log("🍪 User ID cookie set:",o)):(document.cookie="user_id=; Max-Age=0; path=/; SameSite=Lax",console.log("🍪 User ID cookie cleared"))}(t);async function l(){if(console.log("🔄 Starting cart sync..."),t=n(),!t)return void console.log("⚠️ No customer ID, skipping sync");const c=await a(),l=await async function(){if(!t)return console.log("⚠️ No customer ID, skipping backend cart fetch"),null;try{console.log("🔄 Fetching backend cart...");const e=await fetch(`${o}/api/cart?userId=${encodeURIComponent(t)}`,{method:"GET",headers:{Accept:"application/json"}});if(e.ok){const o=await e.json();return console.log("🔄 Backend cart fetched:",o.cart),o.cart||null}}catch(o){console.error("❌ Error fetching backend cart:",o)}return null}();if(!e)return console.log("🔄 First sync attempt..."),!(l&&l.items&&l.items.length>0)||c&&r(c,l)?!l&&c&&c.items&&c.items.length>0?(console.log("🔄 Syncing local cart to backend..."),await s(c),void(e=!0)):void(e=!0):(console.log("🔄 Replacing local cart with backend cart..."),await async function(o){if(console.log("🔄 Replacing Shopify cart..."),await fetch("/cart/clear.js",{method:"POST",credentials:"include"}),console.log("✅ Cart cleared"),o&&o.items&&o.items.length>0){console.log("🛒 Adding items to cart:",o.items);const t=o.items.map((o=>({id:o.shopifyVariantId||o.variantId||o.variant_id,quantity:o.quantity,properties:o.properties||void 0})));await fetch("/cart/add.js",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({items:t})}),console.log("✅ Items added to cart")}await async function(o,t=10,e=300){console.log("⏳ Waiting for Shopify cart to match...");for(let n=0;n<t;n++){if(r(await a(),o))return void console.log("✅ Cart matched successfully");console.log(`⏳ Attempt ${n+1}/${t}: Cart not matched yet`),await new Promise((o=>setTimeout(o,e)))}console.warn("⚠️ Shopify cart did not match backend cart after waiting")}(o)}(l),i(l),e=!0,void console.log("✅ Cart Loaded ⚡️"));if(!(c&&l&&r(c,l))){if(c&&c.items&&c.items.length>0&&(!l||!r(c,l))){console.log("🔄 Syncing local cart to backend...");const o=await s(c);return console.log("✅ Cart saved ⚡️"),void(o&&i(o,null))}return!l||c&&r(c,l)?void 0:(console.log("🔄 Updating local cart with backend data..."),void i(l,null))}console.log("🔄 Carts are in sync, no action needed")}t=n(),t&&function(t){t?(console.log("🔄 Updating session with user ID:",t),fetch(o+"/api/session/update",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:t})}).then((o=>{o.ok?console.log("✅ Session updated successfully"):console.error("❌ Failed to update session:",o.status)})).catch((o=>{console.error("❌ Error updating session:",o)}))):console.log("⚠️ No customer ID provided for session update")}(t),console.log("🏹 Arco - Cart Sync Initialized"),function(){console.log("🔄 Setting up cart request interception...");const o=window.fetch;window.fetch=function(...t){let n="string"==typeof t[0]?t[0]:t[0]?.url;return n&&n.match(/\/cart\/(add|update|change|clear)(\.js)?/)&&e&&(console.log("🛒 Cart modification detected:",n),setTimeout((()=>{console.log("🔄 Triggering sync after cart modification..."),l()}),500)),o.apply(this,t)};const t=window.XMLHttpRequest.prototype.open;window.XMLHttpRequest.prototype.open=function(o,n,...c){return this.addEventListener("load",(function(){n&&n.match(/\/cart\/(add|update|change|clear)(\.js)?/)&&e&&(console.log("🛒 Cart modification detected (XHR):",n),setTimeout((()=>{console.log("🔄 Triggering sync after cart modification..."),l()}),500))})),t.call(this,o,n,...c)},console.log("✅ Cart request interception setup complete")}(),l(),async function(){console.log("🔄 Starting cart observation...");let o=await a();console.log("📝 Initial cart state:",o),setInterval((async()=>{const t=await a();t&&t.items&&t.items.length>0&&!r(t,o)&&(console.log("🔄 Cart change detected in observation interval"),console.log("📝 Previous cart:",o),console.log("📝 Current cart:",t),o=t,c()?(console.log("🔄 Syncing observed cart changes to backend..."),await s(t)):console.log("⚠️ User not logged in, skipping backend sync"))}),2e3),console.log("✅ Cart observation started")}()}();