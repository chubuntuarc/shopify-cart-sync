!function(){const t="https://arco-henna.vercel.app";let n=null;async function e(){try{const t=await fetch("/cart.js",{method:"GET",credentials:"include",headers:{Accept:"application/json"}});if(t.ok){const n=await t.json();return console.log("[CartSync] Local cart fetched:",n),n}}catch(t){console.error("[CartSync] Error fetching Shopify AJAX cart:",t)}return null}async function o(){if(!n)return null;try{const e=await fetch(`${t}/api/cart?userId=${encodeURIComponent(n)}`,{method:"GET",headers:{Accept:"application/json"}});if(e.ok){const t=await e.json();return console.log("[CartSync] Backend cart fetched:",t.cart),t.cart||null}}catch(t){console.error("[CartSync] Error fetching backend cart:",t)}return null}async function a(e){if(!n)return null;try{await fetch(t+"/api/cart",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:n,cartData:e||{}})}),console.log("[CartSync] Local cart synced to backend.")}catch(t){console.error("[CartSync] Error syncing local cart to backend:",t)}}async function c(t){try{if(localStorage.setItem("cart_sync_reloaded","1"),await fetch("/cart/clear.js",{method:"POST",credentials:"include"}),t&&t.items&&t.items.length>0){const n=t.items.map((t=>({id:t.shopifyVariantId||t.variantId||t.variant_id,quantity:t.quantity,properties:t.properties||void 0})));await fetch("/cart/add.js",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({items:n})})}console.log("[CartSync] Local cart replaced with backend cart. Reloading..."),window.location.reload()}catch(t){console.error("[CartSync] Error replacing cart:",t)}}async function r(){if(console.log("[CartSync] Initial sync started."),localStorage.getItem("cart_sync_reloaded"))return localStorage.removeItem("cart_sync_reloaded"),void console.log("[CartSync] Reload marker found, skipping sync to avoid reload loop.");if(n=function(){const t="undefined"!=typeof window&&window.CUSTOMER_ID?String(window.CUSTOMER_ID):null;return console.log("[CartSync] Customer ID:",t),t}(),!n)return void console.log("[CartSync] No customer ID, skipping sync.");const[t,r]=await Promise.all([e(),o()]),i=t&&t.items&&t.items.length>0,l=r&&r.items&&r.items.length>0;if(i||l)return i&&!l?(console.log("[CartSync] Local has items, backend empty. Syncing local to backend..."),void await a(t)):!i&&l?(console.log("[CartSync] Local empty, backend has items. Replacing local cart..."),void await c(r)):function(t,n){const e=JSON.stringify(t)===JSON.stringify(n);return console.log("[CartSync] Carts equal:",e),e}(t,r)?void console.log("[CartSync] Both carts have items and are equal. Nothing to do."):(console.log("[CartSync] Both carts have items but are different. Replacing local cart with backend..."),void await c(r));console.log("[CartSync] Both carts empty, nothing to do.")}const i=()=>{console.log("[CartSync] Script loaded."),r(),function(){const t=window.fetch;window.fetch=function(...n){let o="string"==typeof n[0]?n[0]:n[0]?.url;return o&&o.match(/\/cart\/(add|update|change|clear)(\.js)?/)&&(setTimeout((async()=>{const t=await e();await a(t)}),100),console.log("[CartSync] Cart update event detected, syncing to backend...")),t.apply(this,n)};const n=window.XMLHttpRequest.prototype.open;window.XMLHttpRequest.prototype.open=function(t,o,...c){return this.addEventListener("load",(function(){o&&o.match(/\/cart\/(add|update|change|clear)(\.js)?/)&&(setTimeout((async()=>{const t=await e();await a(t)}),100),console.log("[CartSync] Cart update event detected (XHR), syncing to backend..."))})),n.call(this,t,o,...c)}}()};"complete"===document.readyState?i():window.addEventListener("load",i)}();