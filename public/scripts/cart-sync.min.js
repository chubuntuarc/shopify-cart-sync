!function(){const t="https://arco-henna.vercel.app";let e=null,n=null;function a(){return"undefined"!=typeof window&&window.CUSTOMER_ID?String(window.CUSTOMER_ID):null}async function o(){try{const t=await fetch("/cart.js",{method:"GET",credentials:"include",headers:{Accept:"application/json"}});if(t.ok){return await t.json()}}catch(t){}return null}async function i(){if(!e)return null;try{const n=await fetch(`${t}/api/cart?userId=${encodeURIComponent(e)}`,{method:"GET",headers:{Accept:"application/json"}});if(n.ok){return(await n.json()).cart||null}}catch(t){}return null}async function c(n){if(!e)return null;try{await fetch(t+"/api/cart",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e,cartData:n||{}})}),console.log("[CartSync] Local cart synced to backend."),d()}catch(t){}}function r(t,e){if(!t||!e)return!1;const n=(t.items?.length||0)===(e.items?.length||0),a=t.total_price?t.total_price/100:0,o=e.totalPrice||0;return n&&a===o}async function l(t){try{if(localStorage.setItem("cart_sync_reloaded","1"),await fetch("/cart/clear.js",{method:"POST",credentials:"include"}),t&&t.items&&t.items.length>0){const e=t.items.map(t=>({id:t.shopifyVariantId||t.variantId||t.variant_id,quantity:t.quantity,properties:t.properties||void 0}));await fetch("/cart/add.js",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({items:e})})}window.location.reload()}catch(t){}}function s(){const t=window.fetch;window.fetch=function(...e){let a="string"==typeof e[0]?e[0]:e[0]?.url;return a&&a.match(/\/cart\/(add|update|change|clear)(\.js)?/)&&(n&&(clearInterval(n),console.log("[CartSync] Polling interval stopped due to cart request interception.")),setTimeout(async()=>{const t=await o();await c(t)},1500)),t.apply(this,e)};const e=window.XMLHttpRequest.prototype.open;window.XMLHttpRequest.prototype.open=function(t,a,...i){return this.addEventListener("load",function(){a&&a.match(/\/cart\/(add|update|change)(\.js)?/)&&(n&&(clearInterval(n),console.log("[CartSync] Polling interval stopped due to cart request interception.")),setTimeout(async()=>{const t=await o();await c(t)},1500))}),e.call(this,t,a,...i)}}function d(){n=setInterval(async()=>{if("visible"!==document.visibilityState)return;if(e=a(),!e)return;console.log("[CartSync] Polling for cart updates...");const[t,c]=await Promise.all([o(),i()]);r(t,c)?console.log("[CartSync] Carts are equal. No update needed."):(console.log("[CartSync] Cart difference detected. Updating local cart from backend."),await l(c),clearInterval(n))},5e3)}const u=()=>{!async function(){if(localStorage.getItem("cart_sync_reloaded"))return void localStorage.removeItem("cart_sync_reloaded");if(e=a(),!e)return;const[t,n]=await Promise.all([o(),i()]),s=t&&t.items&&t.items.length>0,d=n&&n.items&&n.items.length>0;if(s||d)if(!s||d){if(s||!d)return r(t,n)?void 0:void await l(n);await l(n)}else await c(t)}(),setTimeout(s,1e3),d()};"complete"===document.readyState?u():window.addEventListener("load",u)}();